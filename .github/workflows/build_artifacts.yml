name: Build Artifacts

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Cache build dependencies
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ github.workflow }}-${{ github.job }}
          path: |
            ~/.cache

      - name: Install build dependencies
        run: |
            sudo sed -i "s/deb\ /deb \[arch=amd64\]\ /g" /etc/apt/sources.list
            echo 'deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports bionic main universe' | sudo tee -a /etc/apt/sources.list
            echo 'deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports bionic-updates main universe' | sudo tee -a /etc/apt/sources.list
            echo 'deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports bionic-security main universe' | sudo tee -a /etc/apt/sources.list
            sudo dpkg --add-architecture armhf
            sudo dpkg --add-architecture arm64
            sudo apt-get update
            sudo apt-get install -y python3-all python3-numpy build-essential crossbuild-essential-armhf crossbuild-essential-arm64 libusb-1.0-0-dev libusb-1.0-0-dev:arm64   libusb-1.0-0-dev:armhf zlib1g-dev zlib1g-dev:armhf zlib1g-dev:arm64 pkg-config zip unzip curl wget software-properties-common cmake
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y gcc-9 g++-9
            wget -O /tmp/bazel https://github.com/bazelbuild/bazel/releases/download/4.0.0/bazel-4.0.0-installer-linux-x86_64.sh
            sudo bash /tmp/bazel
            sudo rm -f /tmp/bazel

      - name: Build packages
        run: |
            make
            CPU=armv7a make
            CPU=aarch64 make
            bazel shutdown

      - name: Test example
        run: |
            cd example
            mkdir -p build
            cd build
            cmake ..
            make
            ./runecoralexample

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.run_id }}-librunecoral-artifacts-linux
          path: dist/

  rust:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            rust/Cargo.lock
            ~/.cache
          key: ${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
      # libclang is needed by bindgen
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path rust/Cargo.toml
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path rust/Cargo.toml
